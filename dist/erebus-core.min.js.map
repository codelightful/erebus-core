{"version":3,"file":"erebus-core.min.js","sources":["../src/utils.mjs","../src/cookies.mjs","../src/random.mjs","../src/events.mjs","../src/handler.mjs","../src/http.mjs","../src/element.mjs","../src/i18n.mjs","../src/formats.mjs","../src/router.mjs","../src/validator.mjs","../src/form.mjs","../src/controller.mjs","../src/index.mjs"],"sourcesContent":["const $module = {};\r\n\r\n/**\r\n * Allows to determine if a specific instance is a promise object (or a promise-like object)\r\n * @param {*} value Object to evaluate\r\n * @returns Boolean value to determine if the object is a promise or not\r\n */\r\n$module.isPromise = function(value) {\r\n\tif (!value) {\r\n\t\treturn false;\r\n\t}\r\n\treturn (value instanceof Promise) || (typeof (value.then === 'function') && typeof (value.catch) === 'function');\r\n};\r\n\r\n/** Trims a string by removing leading and trailing white spaces  */\r\n$module.trim = function (value) {\r\n\tif (typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\treturn value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n};\r\n\r\n/** Determines if a specific value is null, undefined or an empty string */\r\n$module.isNonValue = function(value, trim) {\r\n\tif (trim === true && value && typeof(value) === 'string') {\r\n\t\tvalue = $module.trim(value);\r\n\t}\r\n\treturn value === null || value === undefined || (typeof(value) === 'string' && value.length === 0);\r\n};\r\n\r\nexport default $module;","import utils from './utils.mjs';\r\n\r\nconst $module = {};\r\n\r\n/**\r\n * Sets the value for a cookie entry\r\n * @param name Name of the cookie to set\r\n * @param value Value to set. Omit or set to null to clean the cookie\r\n * @param timespan Timespan to maintain the cookie (in seconds)\r\n */\r\n$module.set = function (name, value, timespan) {\r\n\tif (!name) {\r\n\t\tthrow new Error('erebus.cookies.set.null_cookie_name');\r\n\t}\r\n\tif (typeof (timespan) !== 'number') {\r\n\t\ttimespan = 3600;\r\n\t}\r\n\tvar expireDate = new Date();\r\n\tif (value === null || value === undefined) {\r\n\t\tvalue = '';\r\n\t\texpireDate.setTime(expireDate.getTime() - 1000);\r\n\t} else {\r\n\t\texpireDate.setTime(expireDate.getTime() + (timespan * 1000));\r\n\t}\r\n\tvar cookie = utils.trim(name) + '=' + value + ';expires=' + expireDate.toGMTString() + ';path=/';\r\n\tdocument.cookie = cookie;\r\n};\r\n\r\n/**\r\n * Obtains the value from a cookie\r\n * @param name Name of the cookie to obtain\r\n * @returns Cookie value or null if it is not defined\r\n */\r\n$module.get = function (name) {\r\n\tif (!name) {\r\n\t\treturn null;\r\n\t}\r\n\tvar cookiestring = RegExp(name + '=[^;]+').exec(document.cookie);\r\n\tif (cookiestring) {\r\n\t\treturn decodeURIComponent(cookiestring.toString().replace(/^[^=]+./, ''));\r\n\t}\r\n\treturn '';\r\n};\r\n\r\nexport default $module;","/** Creates a random tiny identified composed by 4 alphanumeric characters */\r\nfunction tinyId() {\r\n\treturn (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n}\r\n\r\n/** Creates a random short identified composed by 8 alphanumeric characters */\r\nfunction shortId() {\r\n\treturn tinyId() + tinyId();\r\n}\r\n\r\n/** Creates a random values simulating a global global unique identifier */\r\nfunction guid() {\r\n\treturn tinyId()\r\n\t\t+ '-' + tinyId()\r\n\t\t+ '-' + tinyId()\r\n\t\t+ '-' + tinyId()\r\n\t\t+ tinyId();\r\n}\r\n\r\nexport default { tinyId, shortId, guid };","const $module = {};\r\n\r\n/**\r\n * Returns a promise fullfilled when the document has been loaded and parsed.\r\n * @returns Promise to be fulfilled once the document is ready\r\n */\r\n$module.documentReady = function() {\r\n\tif (document.readyState !== 'loading') {\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\tif (typeof (document.addEventListener) === 'function') {\r\n\t\treturn new Promise(function(resolve) {\r\n\t\t\tdocument.addEventListener('DOMContentLoaded', resolve, false);\r\n\t\t});\r\n\t}\r\n\tif (typeof (document.attachEvent) === 'function') {\r\n\t\treturn new Promise(function(resolve) {\r\n\t\t\tdocument.attachEvent('onreadystatechange', function () {\r\n\t\t\t\tif (document.readyState === 'complete') {\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\tconsole.error('The current browser event management is not supported by the Erebus framework');\r\n\treturn Promise.reject('erebus.events.unsuported_browser');\r\n};\r\n\r\n/**\r\n * Internal method to assign an animation class to an element and invoke a callback when is completed\r\n * @param target Reference to the HTMLElement (or ErebusElement) to animate\r\n * @param animationClass String with the CSS animation name to apply\r\n */\r\n$module.animate = function(target, animationClass) {\r\n\tif (!target) {\r\n\t\treturn Promise.reject('erebus.events.wait_animation.invalid_target');\r\n\t} else if (!animationClass) {\r\n\t\treturn Promise.reject('erebus.events.wait_animation.invalid_animation');\r\n\t}\r\n\treturn new Promise(function(resolve) {\r\n\t\t// registers the event handler\r\n\t\ttarget.addEventListener('animationend', function () {\r\n\t\t\tresolve();\r\n\t\t}, { capture: false, once: true });\r\n\r\n\t\t// implements the animation\r\n\t\tif (target.className === '') {\r\n\t\t\ttarget.className = animationClass;\r\n\t\t} else if (target.classList) {\r\n\t\t\ttarget.classList.add(animationClass);\r\n\t\t} else if (typeof (target.addClass) === 'function') {\r\n\t\t\ttarget.addClass(animationClass);\r\n\t\t} else {\r\n\t\t\ttarget.className += ' ' + animationClass;\r\n\t\t}\r\n\t});\r\n};\r\n\r\nexport default $module;","const $module = {};\r\n\r\n/** Invokes a function with exception management */\r\n$module.trigger = function(fnc, ...params) {\r\n\tif (fnc === null || fnc === undefined) {\r\n\t\treturn;\r\n\t} else if (typeof(fnc) !== 'function') {\r\n\t\tthrow new Error('erebus.handler.trigger.invalid_function');\r\n\t}\r\n\ttry {\r\n\t\treturn fnc.call(null, ...params);\r\n\t} catch (ex) {\r\n\t\tthrow new Error('erebus.handlers.trigger.function_error', ex);\r\n\t}\r\n};\r\n\r\n/** Invokes a function with exception management */\r\n$module.triggerAsPromise = function(fnc, ...params) {\r\n\tif (fnc === null || fnc === undefined) {\r\n\t\treturn Promise.resolve();\r\n\t} else if (typeof(fnc) !== 'function') {\r\n\t\treturn Promise.reject('erebus.handler.trigger_promise_function.invalid_function');\r\n\t}\r\n\treturn new Promise(function(resolve, reject) {\r\n\t\ttry {\r\n\t\t\tconst result = fnc.call(null, ...params);\r\n\t\t\tresolve(result);\r\n\t\t} catch (ex) {\r\n\t\t\tconsole.error('erebus.handlers.trigger_promise_function.function_error', ex);\r\n\t\t\treject(ex);\r\n\t\t}\r\n\t});\r\n};\r\n\r\nexport default $module;","import utils from './utils.mjs';\r\n\r\nconst $module = {};\r\n/** Internal scoped variable holders */\r\nconst $scope = {};\r\n/** Holds all the estandard parsers defined for the library */\r\n$scope.parsers = {};\r\n\r\n/** Creates the underlying XMLHTTP object used to execute ajax calls */\r\nfunction createXmlHttp() {\r\n\tif (window.XMLHttpRequest) {\r\n\t\treturn new window.XMLHttpRequest();\r\n\t}\r\n\ttry {\r\n\t\treturn new ActiveXObject('Msxml2.XMLHTTP');\r\n\t} catch (ex) {\r\n\t\ttry {\r\n\t\t\treturn new ActiveXObject('Microsoft.XMLHTTP');\r\n\t\t} catch (ex) {\r\n\t\t\tthrow new Error('erebus.http.xmlhttp_error');\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Internal method to extract the response headers associated with a particular XMLHTTP request\r\n * @param request Instance of the XMLHTTP that initiated the request\r\n * @returns Object with all the headers as attributes\r\n */\r\nfunction getResponseHeaders(request) {\r\n\tconst headers = {};\r\n\tlet rawHeaders = request.getAllResponseHeaders();\r\n\tif (rawHeaders) {\r\n\t\trawHeaders = rawHeaders.split('\\r\\n');\r\n\t\tfor (let idx = 0; idx < rawHeaders.length; idx++) {\r\n\t\t\tif (!rawHeaders[idx]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst parts = rawHeaders[idx].split(':');\r\n\t\t\t// NOTE: on older browsers the header name can have mixed case, on recent browsers it is only lowercase\r\n\t\t\tconst headerName = utils.trim(parts[0]).toLowerCase();\r\n\t\t\tconst headerValue = utils.trim(parts[1]);\r\n\t\t\tif (headerName && headerValue) {\r\n\t\t\t\theaders[headerName] = headerValue;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn headers;\r\n}\r\n\r\n/**\r\n * Internal utility method to set request headers\r\n * @param {*} request XHR object representing the request\r\n * @param {*} headers Object with the headers to set. Each header is an attribute in the object\r\n */\r\nfunction setRequestHeaders(request, headers) {\r\n\tif (headers) {\r\n\t\tfor (var headerName in headers) {\r\n\t\t\trequest.setRequestHeader(headerName, headers[headerName]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Parses a response as a JSON */\r\n$scope.parsers['json'] = function (response) {\r\n\ttry {\r\n\t\treturn JSON.parse(response);\r\n\t} catch (ex) {\r\n\t\tconst err = new Error('erebus.http.json_parse_error');\r\n\t\terr.cause = ex;\r\n\t\terr.response = response;\r\n\t\tthrow err;\r\n\t}\r\n};\r\n\r\n/** Internal method to obtain the proper parser according to the content type or null if no transformations are required */\r\nfunction getResponseParser(headers) {\r\n\tconst contentType = (headers && typeof(headers['content-type']) === 'string') ? headers['content-type'] : null;\r\n\tif (contentType && contentType.startsWith('application/json')) {\r\n\t\treturn $scope.parsers['json'];\r\n\t}\r\n\treturn null;\r\n}\r\n\r\n/**\r\n *\r\n * @param url String with the resource URL to be requested\r\n * @param options Object with the options to execute the request. The values are:\r\n * \t\t\t\t\t- method: String with the HTTP method to execute: GET, POST, PUT, DELETE. If this is not provided, GET will be used by default.\r\n * \t\t\t\t\t- async: Boolean value to determine if the request should be asynchronous (true) or not. By default it is true.\r\n *                  - data: Data to be included in a POST, PUT or DELETE request\r\n * @returns Promise to be fulfilled according to the HTTP request result\r\n */\r\nfunction executeRequest(method, url, options) {\r\n\tif (typeof (url) !== 'string' || !url) {\r\n\t\treturn Promise.reject('erebus.http.null_url');\r\n\t}\r\n\tif (!options) {\r\n\t\toptions = {};\r\n\t}\r\n\tif (!method) {\r\n\t\tmethod = 'GET';\r\n\t}\r\n\treturn new Promise(function (resolve, reject) {\r\n\t\tconst request = createXmlHttp();\r\n\t\trequest.onreadystatechange = function () {\r\n\t\t\tif (request.readyState == 4 || request.readyState === 'complete') {\r\n\t\t\t\tif (request.status === 0) {\r\n\t\t\t\t\tconst err = new Error('erebus.http.connection_refused');\r\n\t\t\t\t\terr.code = 'http';\r\n\t\t\t\t\terr.status = 'connection_error';\r\n\t\t\t\t\terr.response = null;\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t} else if (request.status !== 200) {\r\n\t\t\t\t\tconst err = new Error('erebus.http.error.' + request.status);\r\n\t\t\t\t\terr.code = 'http';\r\n\t\t\t\t\terr.status = request.status;\r\n\t\t\t\t\terr.response = request.responseText;\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar response = request.responseText;\r\n\t\t\t\t\tconst headers = getResponseHeaders(request);\r\n\t\t\t\t\tconst parser = getResponseParser(headers);\r\n\t\t\t\t\tif (parser) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tresponse = parser(response);\r\n\t\t\t\t\t\t} catch (ex) {\r\n\t\t\t\t\t\t\treject(ex);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (typeof (options.interceptor) === 'function') {\r\n\t\t\t\t\t\tconst result = options.interceptor(response, headers);\r\n\t\t\t\t\t\tif (result !== undefined) {\r\n\t\t\t\t\t\t\tresponse = result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresolve(response);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\trequest.open(method, url, options.async !== false);\r\n\t\tsetRequestHeaders(request, options.headers);\r\n\t\tif (method === 'GET' || !options.data) {\r\n\t\t\trequest.send();\r\n\t\t} else {\r\n\t\t\trequest.send(options.data);\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * Executes a HTTP GET request\r\n * @param {string} url String with the resource URL to request\r\n * @param {object} options Object with the options to execute the request.  The attributes are:\r\n * \t\t\t- headers: Object with the headers to pass\r\n * \t\t\t- interceptor: Optional function to capture and process the response received.  The function will receive\r\n * \t\t\t\t\ttwo parameters: the response content and the response headers\r\n * \t\t\t- async: Optional boolean value to determine if the call should be asynchronous or not. By default all\r\n * \t\t\t\t\trequests are asynchronous\r\n * @returns Promise to be fullfilled or rejecting according to the executed request\r\n */\r\n$module.get = function (url, options) {\r\n\treturn executeRequest('GET', url, options);\r\n};\r\n\r\n/**\r\n * Executes a HTTP POST request\r\n * @param {string} url String with the resource URL to request\r\n * @param {object} options Object with the options to execute the request.  The attributes are:\r\n * \t\t\t- headers: Object with the headers to pass\r\n * \t\t\t- interceptor: Optional function to capture and process the response received.  The function will receive\r\n * \t\t\t\t\ttwo parameters: the response content and the response headers\r\n * \t\t\t- async: Optional boolean value to determine if the call should be asynchronous or not. By default all\r\n * \t\t\t\t\trequests are asynchronous\r\n * \t\t\t- data: Data to include in the post request\r\n * @returns Promise to be fullfilled or rejecting according to the executed request\r\n */\r\n$module.post = function (url, options) {\r\n\treturn executeRequest('POST', url, options);\r\n};\r\n\r\n/**\r\n * Executes a HTTP PUT request\r\n * @param {string} url String with the resource URL to request\r\n * @param {object} options Object with the options to execute the request.  The attributes are:\r\n * \t\t\t- headers: Object with the headers to pass\r\n * \t\t\t- interceptor: Optional function to capture and process the response received.  The function will receive\r\n * \t\t\t\t\ttwo parameters: the response content and the response headers\r\n * \t\t\t- async: Optional boolean value to determine if the call should be asynchronous or not. By default all\r\n * \t\t\t\t\trequests are asynchronous\r\n * \t\t\t- data: Data to include in the post request\r\n * @returns Promise to be fullfilled or rejecting according to the executed request\r\n */\r\n$module.put = function (url, options) {\r\n\treturn executeRequest('PUT', url, options);\r\n};\r\n\r\n/**\r\n * Executes a HTTP DELETE request\r\n * @param {string} url String with the resource URL to request\r\n * @param {object} options Object with the options to execute the request.  The attributes are:\r\n * \t\t\t- headers: Object with the headers to pass\r\n * \t\t\t- interceptor: Optional function to capture and process the response received.  The function will receive\r\n * \t\t\t\t\ttwo parameters: the response content and the response headers\r\n * \t\t\t- async: Optional boolean value to determine if the call should be asynchronous or not. By default all\r\n * \t\t\t\t\trequests are asynchronous\r\n * \t\t\t- data: Data to include in the post request\r\n * @returns Promise to be fullfilled or rejecting according to the executed request\r\n */\r\n$module.delete = function (url, options) {\r\n\treturn executeRequest('DELETE', url, options);\r\n};\r\n\r\n/**\r\n * Loads a JavaScript resource dynamically\r\n * @param url URL to load the script from it\r\n * @returns Promise that allows to handle the script loading actions\r\n */\r\n$module.loadScript = function (url) {\r\n\treturn new Promise((resolve) => {\r\n\t\tvar element = document.createElement('script');\r\n\t\telement.src = url;\r\n\t\telement.type = 'text/javascript';\r\n\t\telement.async = false;\r\n\t\telement.onerror = () => {\r\n\t\t\t/*\r\n\t\t\treject(errorHandler.create({\r\n\t\t\t\tmodule: $moduleName,\r\n\t\t\t\tcode: `erebus.http.load_script_error[${url}]`\r\n\t\t\t})); // TODO: collect error info\r\n\t\t\t*/\r\n\t\t};\r\n\t\telement.onload = () => {\r\n\t\t\tresolve();\r\n\t\t};\r\n\t\tdocument.head.appendChild(element);\r\n\t});\r\n};\r\n\r\nexport default $module;","import utils from './utils.mjs';\r\nimport http from './http.mjs';\r\nimport random from './random.mjs';\r\n\r\nconst $scope = {};\r\n// Will hold the reference to the parser instance (if available) or false if it is not available\r\n$scope.domParser = null;\r\n\r\n/**\r\n * Utility method to create a HTMLElement from an XMLElement\r\n * @param {*} xmlElement XMLElement to create the XMLFrom it\r\n * @returns HTMLElement created from the XMLElement\r\n */\r\nfunction xmlToHtml(xmlElement) {\r\n\tvar htmlElement = document.createElement(xmlElement.tagName);\r\n\t// Recreates the attributes\r\n\tfor (let ndx=0; ndx < xmlElement.attributes.length; ndx++) {\r\n\t\tconst xmlAttribute = xmlElement.attributes[ndx];\r\n\t\thtmlElement.setAttribute(xmlAttribute.name, xmlAttribute.value);\r\n\t}\r\n\t// Recreates the child elements\r\n\tfor (let ndx=0; ndx < xmlElement.childNodes.length; ndx++) {\r\n\t\tconst childXml = xmlElement.childNodes[ndx];\r\n\t\tif (childXml.nodeType === 3) {\r\n\t\t\tconst childText = document.createTextNode(childXml.textContent);\r\n\t\t\thtmlElement.appendChild(childText);\r\n\t\t\tcontinue;\r\n\t\t} else if (childXml.nodeType !== 1) {\r\n\t\t\tconsole.warn(`erebus.element.xml_to_html.invalid_node_type[${childXml.nodeType}]`);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tconst childHtml = xmlToHtml(childXml);\r\n\t\thtmlElement.appendChild(childHtml);\r\n\t}\r\n\treturn htmlElement;\r\n}\r\n\r\n/**\r\n * Parses a string HTML content and returns its content or null if it is not HTML content\r\n * @param {string} content HTML content to parse\r\n * @returns DOM elements representing the content\r\n */\r\nfunction parseHTML(content) {\r\n\tif (!content || typeof (content) !== 'string') {\r\n\t\treturn [];\r\n\t}\r\n\tif ($scope.domParser === null) {\r\n\t\tif (typeof(DOMParser) === 'undefined') {\r\n\t\t\t$scope.domParser = false;\r\n\t\t} else {\r\n\t\t\t$scope.domParser = new DOMParser();\r\n\t\t}\r\n\t}\r\n\tif ($scope.domParser === false) {\r\n\t\tconst holder = document.createElement('div');\r\n\t\tholder.innerHTML = content;\r\n\t\treturn [...holder.childNodes];\r\n\t}\r\n\t// NOTE: We use the XML parser, because the HTML parser does not parse certain tags\r\n\t// For example: trying to parse a TR or a TD does not work\r\n\t// Parsing atomic HTMLElements is crucial for the good work of the element since allows to create atomic portions of content\r\n\tconst results = [];\r\n\tconst holder = $scope.domParser.parseFromString(content, 'text/xml');\r\n\tfor (let ndx=0; ndx < holder.childNodes.length; ndx++) {\r\n\t\tconst htmlElement = xmlToHtml(holder.childNodes[ndx]);\r\n\t\tresults.push(htmlElement);\r\n\t}\r\n\treturn results;\r\n}\r\n\r\n/**\r\n * Removes all the child nodes from a specific element\r\n * @param {HTMLElement} target Element to remove the childs from it\r\n */\r\nfunction removeAllChild(target) {\r\n\tif (!target || !(target instanceof HTMLElement)) {\r\n\t\treturn;\r\n\t}\r\n\twhile (target.firstChild) {\r\n\t\ttarget.removeChild(target.firstChild);\r\n\t}\r\n}\r\n\r\n/**\r\n * Executes a deep copy of an HTMLElement\r\n * @param {HTMLElement} sourceElement Element to copy\r\n * @returns Copy of the element\r\n */\r\nfunction cloneHTMLElement(sourceElement) {\r\n\tif (!sourceElement || !(sourceElement instanceof HTMLElement)) {\r\n\t\treturn null;\r\n\t}\r\n\tconst clonedElement = sourceElement.cloneNode(true);\r\n\tif (clonedElement.nodeType === 1) {\r\n\t\tclonedElement.removeAttribute('id'); // the element identifier should not be cloned\r\n\t}\r\n\treturn clonedElement;\r\n}\r\n\r\n/**\r\n * Creates a block containing error information that can be correlated in the console\r\n * @param {*} errorCode Code to show in the console to describe the error\r\n * @param {*} errorInstance Root cause (usually an Error object captured as an exception)\r\n * @returns HTMLElement containing the error message to be shown in the UI\r\n */\r\nfunction createErrorContent(errorCode, errorInstance) {\r\n\tconst errorId = random.shortId();\r\n\tif (errorInstance) {\r\n\t\tconsole.error(`${errorCode}[${errorId}]`, errorInstance);\r\n\t} else {\r\n\t\tconsole.error(`${errorCode}[${errorId}]`);\r\n\t}\r\n\tconst errorElement = document.createElement('div');\r\n\terrorElement.innerHTML = `Error[${errorId}]`;\r\n\treturn errorElement;\r\n}\r\n\r\n/**\r\n * Internal method to create an ErebusElement based on the data provided\r\n * @param {*} source String with the selector, string with HTML code (to create a wrapper for it), reference to an HTMLElement\r\n * @returns\r\n */\r\nfunction createErebusElement(source) {\r\n\tif (!source) {\r\n\t\treturn null;\r\n\t} else if (source instanceof ErebusElement) {\r\n\t\treturn source;\r\n\t} else if (source === 'body' || source === document.body) {\r\n\t\tif (!$scope.body) {\r\n\t\t\t$scope.body = new ErebusElement(document.body);\r\n\t\t}\r\n\t\treturn $scope.body;\r\n\t} else if (source instanceof HTMLElement) {\r\n\t\treturn new ErebusElement(source);\r\n\t} else if (typeof (source) === 'string') {\r\n\t\tvar nativeSource;\r\n\t\tif (source.startsWith('<') && source.endsWith('>')) {\r\n\t\t\tnativeSource = parseHTML(source);\r\n\t\t\tif (nativeSource.length == 0) {\r\n\t\t\t\tnativeSource = createErrorContent('erebus.element.invalid_html.empty_content');\r\n\t\t\t} else if (nativeSource.length > 1) {\r\n\t\t\t\tnativeSource = createErrorContent('erebus.element.invalid_html.multiple_nodes');\r\n\t\t\t} else {\r\n\t\t\t\tnativeSource = nativeSource[0];\r\n\t\t\t}\r\n\t\t} else if (source.startsWith('#')) {\r\n\t\t\tnativeSource = document.getElementById(source.substring(1));\r\n\t\t\tif (!nativeSource) {\r\n\t\t\t\tthrow new Error(`erebus.element.unknown_element_id[${source}]`);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tnativeSource = document.querySelector(source);\r\n\t\t\tif (!nativeSource) {\r\n\t\t\t\tthrow new Error(`erebus.element.unknown_selector[${source}]`);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn new ErebusElement(nativeSource);\r\n\t}\r\n}\r\n\r\n/** Wrapper to allow common methods to handle HTML content */\r\nclass ErebusElement {\r\n\t#wrappedElement;\r\n\t// Allows to determine if the element is visible or not\r\n\t#hidden;\r\n\r\n\tconstructor(target) {\r\n\t\tthis.#hidden = false;\r\n\t\tif (target instanceof HTMLElement) {\r\n\t\t\tthis.#wrappedElement = target;\r\n\t\t} else {\r\n\t\t\tthrow new Error('erebus.element.invalid_element[' + typeof (target) + ']');\r\n\t\t}\r\n\t}\r\n\r\n\t/** Allows to obtain the reference to the source wrapped element */\r\n\tget source() {\r\n\t\treturn this.#wrappedElement;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the innerHTML on the wrapped element.\r\n\t * This is a compatibility method to maintain consistency and interchangeability with HTMLElement.\r\n\t * @param {string} value String with the HTML content to set\r\n\t */\r\n\tset innerHTML(value) {\r\n\t\tthis.#wrappedElement.innerHTML = value;\r\n\t}\r\n\r\n\t/** Removes all the content from the current instance */\r\n\tclear() {\r\n\t\tthis.#wrappedElement.innerHTML = '';\r\n\t\tremoveAllChild(this.#wrappedElement);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the content inside the wrapped element.  This method is preferred over innerHTML\r\n\t * since it cleans the event listener associated with the child nodes.\r\n\t * @param {any} value String with the content to add (text or HTML), a reference to a HTMLElement to set as the content\r\n\t * \t\t\tor a reference to another ErebusElement.\r\n\t * @returns The current wrapper instance\r\n\t */\r\n\tcontent(value) {\r\n\t\tthis.clear();\r\n\t\tif (typeof (value) === 'string') {\r\n\t\t\tthis.#wrappedElement.innerHTML = value;\r\n\t\t\t// If javascript content was added as part of the content, then processes it as a script tag\r\n\t\t\tconst innerScripts = this.#wrappedElement.querySelectorAll('script');\r\n\t\t\tfor (var ndx=0; ndx < innerScripts.length; ndx++) {\r\n\t\t\t\tconst scriptObj = innerScripts[ndx];\r\n\t\t\t\tscriptObj.parentNode.removeChild(scriptObj);\r\n\t\t\t\tvar newScript = document.createElement('script');\r\n\t\t\t\tnewScript.textContent = scriptObj.textContent;\r\n\t\t\t\tthis.#wrappedElement.appendChild(newScript);\r\n\t\t\t}\r\n\t\t} else if (value instanceof HTMLElement) {\r\n\t\t\tthis.#wrappedElement.appendChild(value);\r\n\t\t} else if (value instanceof ErebusElement) {\r\n\t\t\tthis.clear();\r\n\t\t\tvalue.setParentNode(this.#wrappedElement);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Append the current instance to a specific parent\r\n\t * @param {*} parent String with the parent selector, reference to the HTMLElement to use as a parent or\r\n\t * \t\t\treference to an ErebusElement or null to detach the wrapped elements\r\n\t * @returns The current wrapper instance\r\n\t */\r\n\tsetParentNode(parent) {\r\n\t\tif (!parent) {\r\n\t\t\tif (this.#wrappedElement.parentNode) {\r\n\t\t\t\tthis.#wrappedElement.parentNode.removeChild(this.#wrappedElement);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t} else if (typeof (parent) === 'string') {\r\n\t\t\tparent = createErebusElement(parent);\r\n\t\t} else if (typeof (parent.appendChild) !== 'function') {\r\n\t\t\tthrow new Error('erebus.wrapper.append_to.invalid_parent[' + typeof (parent) + ']');\r\n\t\t}\r\n\t\tparent.appendChild(this.#wrappedElement);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Alias to the setParent node method that allows to enable compatibility with DOM elements */\r\n\tset parentNode(parent) {\r\n\t\tthis.setParentNode(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Append a child element to the wrapped element\r\n\t * @param {*} value String with the HTML element to add or reference to the HTML element to add or\r\n\t * \t\t\treference to the ErebusElement to add.\r\n\t */\r\n\tappendChild(value) {\r\n\t\tif (typeof (value) === 'string') {\r\n\t\t\tconst parsedContent = parseHTML(value);\r\n\t\t\tfor (let idx = 0; idx < parsedContent.length; idx++) {\r\n\t\t\t\tconst content = parsedContent[idx];\r\n\t\t\t\tthis.#wrappedElement.appendChild(content);\r\n\t\t\t}\r\n\t\t} else if (value instanceof HTMLElement) {\r\n\t\t\tthis.#wrappedElement.appendChild(value);\r\n\t\t} else if (value instanceof ErebusElement) {\r\n\t\t\tthis.#wrappedElement.appendChild(value.source);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a listener to the current instance and its wrapped elements\r\n\t * @param {string} eventName Name of the event. For example click.\r\n\t * @param {function} listener Function to invoke when the event is triggered\r\n\t * @param {object} options Optional object with the options to set the listener (see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\r\n\t * @returns Current element instance to write fluid expressions\r\n\t */\r\n\taddEventListener(eventName, listener, options) {\r\n\t\tif (!eventName) {\r\n\t\t\tthrow new Error('erebus.element.add_listener.null_event_name');\r\n\t\t} else if (typeof (listener) === 'function') {\r\n\t\t\tif (options === undefined) {\r\n\t\t\t\toptions = { capture: false };\r\n\t\t\t}\r\n\t\t\tthis.#wrappedElement.addEventListener(eventName, listener, options);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a single execution listener to the current instance and its wrapped elements\r\n\t * @param {string} eventName Name of the event. For example click.\r\n\t * @param {function} listener Function to invoke when the event is triggered\r\n\t * @returns Current element instance to write fluid expressions\r\n\t */\r\n\tonce(eventName, listener) {\r\n\t\treturn this.addEventListener(eventName, listener, { capture: false, once: true });\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a handler to be invoked when the element is clicked\r\n\t * @param {function} handler Function to invoke when the event is triggered\r\n\t * @param {object} options Optional object with the options to set the listener (see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\r\n\t * @returns Current element instance to write fluid expressions\r\n\t */\r\n\tonClick(handler, options) {\r\n\t\treturn this.addEventListener('click', handler, options);\r\n\t}\r\n\r\n\t/** Allows to determine if the element is hidden or not */\r\n\tget isHidden() {\r\n\t\treturn this.#hidden;\r\n\t}\r\n\r\n\t/** Hides the wrapped elements to make it invisible */\r\n\thide() {\r\n\t\tif (this.#hidden) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.#hidden = true;\r\n\t\tconst computedDisplay = getComputedStyle(this.#wrappedElement).getPropertyValue('display');\r\n\t\tif (computedDisplay && computedDisplay !== 'none') {\r\n\t\t\tthis.#wrappedElement.originalDisplay = computedDisplay;\r\n\t\t}\r\n\t\tthis.#wrappedElement.style.display = 'none';\r\n\t}\r\n\r\n\t/** Shows the wrapped elements to make it visible */\r\n\tshow() {\r\n\t\tthis.#hidden = false;\r\n\t\tconst computedDisplay = getComputedStyle(this.#wrappedElement).getPropertyValue('display');\r\n\t\tif (!computedDisplay || computedDisplay === 'none') {\r\n\t\t\tif (this.#wrappedElement.originalDisplay) {\r\n\t\t\t\tthis.#wrappedElement.style.display = this.#wrappedElement.originalDisplay;\r\n\t\t\t\tdelete this.#wrappedElement.originalDisplay;\r\n\t\t\t} else {\r\n\t\t\t\tthis.#wrappedElement.style.display = 'block';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** Clone the current instance */\r\n\tclone() {\r\n\t\tconst clonedWrapped = cloneHTMLElement(this.#wrappedElement);\r\n\t\treturn new ErebusElement(clonedWrapped);\r\n\t}\r\n\r\n\t/** Adds a new CSS class to the HTMLElements wrapped by the current instance */\r\n\taddClass(...classes) {\r\n\t\tif (!classes || classes.length === 0) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tfor (let cdx = 0; cdx < classes.length; cdx++) {\r\n\t\t\tconst className = utils.trim(classes[cdx]);\r\n\t\t\tif (!className || typeof (className) !== 'string') {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (!this.#wrappedElement.className) {\r\n\t\t\t\tthis.#wrappedElement.className = className;\r\n\t\t\t} else if (this.#wrappedElement.classList) {\r\n\t\t\t\tthis.#wrappedElement.classList.add(className);\r\n\t\t\t} else {\r\n\t\t\t\tconst regex = new RegExp('(^|\\\\s)(' + className + ')($|\\\\s)', 'g');\r\n\t\t\t\tif (!regex.test(this.#wrappedElement.className)) {\r\n\t\t\t\t\tthis.#wrappedElement.className += ' ' + className;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Adds a new CSS class to the HTMLElements wrapped by the current instance */\r\n\tremoveClass(...classes) {\r\n\t\tif (!classes || classes.length === 0) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tif (!this.#wrappedElement.className) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (let cdx = 0; cdx < classes.length; cdx++) {\r\n\t\t\tconst className = utils.trim(classes[cdx]);\r\n\t\t\tif (!className || typeof (className) !== 'string') {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (this.#wrappedElement.classList) {\r\n\t\t\t\tthis.#wrappedElement.classList.remove(className);\r\n\t\t\t} else {\r\n\t\t\t\tconst regex = new RegExp('(^|\\\\s)(' + className + ')($|\\\\s)', 'g');\r\n\t\t\t\tif (regex.test(this.#wrappedElement.className)) {\r\n\t\t\t\t\tthis.#wrappedElement.className = this.#wrappedElement.className.replace(regex, '');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the CSS class name for the HTMLElements wrapped by the current instance\r\n\t * @param {string} value Name of the CSS class to add\r\n\t */\r\n\tset className(value) {\r\n\t\tvalue = utils.trim(value);\r\n\t\tthis.#wrappedElement.className = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Loads the content from an external resource inside the element represented by the current instance\r\n\t * @param {string} url String of the source URL used to load content into the current instance\r\n\t */\r\n\tasync load(url) {\r\n\t\tif (!url) {\r\n\t\t\tthis.content('<div class=\"erb-badge erb-error\">erebus.element.load.no_url</div>');\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tconst response = await http.get(url);\r\n\t\t\tthis.content(response);\r\n\t\t} catch (err) {\r\n\t\t\tvar errorBlock = createErrorContent('erebus.element.load.error', err);\r\n\t\t\tthis.content(errorBlock);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default createErebusElement;","import handler from './handler.mjs';\r\nimport utils from './utils.mjs';\r\n\r\nconst $module = {};\r\nconst $scope = {};\r\n// Holds the language defined for the application\r\n$scope.language = null;\r\n// Holds all the resources defined\r\n$scope.resources = {};\r\n// Holds the symbol used by the system to group the thousands\r\n$scope.systemThousandSymbol = null;\r\n// Holds the symbol used by the application to group the thousands\r\n$scope.appThousandSymbol = null;\r\n// Holds the symbol used by the system to separate the decimal part of a number\r\n$scope.systemDecimalSymbol = null;\r\n// Holds the symbol used by the application to separate the decimal part of a number\r\n$scope.appDecimalSymbol = null;\r\n// Holds the date format defined for the locale\r\n$scope.dateFormat = null;\r\n// Holds the date+time format defined for the locale\r\n$scope.dateTimeFormat = null;\r\n\r\n/** Allows to obtain the locale code in the client */\r\n$module.getLocale = function() {\r\n\tif (navigator.language) {\r\n\t\treturn navigator.language;\r\n\t} else if (navigator.browserLanguage) {\r\n\t\treturn navigator.browserLanguage;\r\n\t}\r\n\treturn 'en-US';\r\n};\r\n\r\n/** Obtains the default language defined for the current system */\r\n$module.getSystemLanguage = function() {\r\n\treturn $module.getLocale().substr(0, 2);\r\n};\r\n\r\n/**\r\n * Allows to set the language used by the application\r\n * @param {string} value Two letter ISO language code\r\n */\r\n$module.setLanguage = function(value) {\r\n\t$scope.language = value;\r\n};\r\n\r\n/** Obtains the language defined for the application */\r\n$module.getLanguage = function() {\r\n\tif (!$scope.language) {\r\n\t\treturn $module.getSystemLanguage();\r\n\t}\r\n\treturn $scope.language;\r\n};\r\n\r\n/**\r\n * Sets the resource bundle for a specific language\r\n * @param {*} resource Object with the labels and values, function providing the object with the label and values\r\n * \t\t\t\tor promise to be fulfilled with the label and values\r\n * @param {*} langCode String with the language code or omit to use the system default language\r\n */\r\n$module.setResourceBundle = function(resource, langCode) {\r\n\tif (!resource) {\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\tif (!langCode) {\r\n\t\tlangCode = $module.getLanguage();\r\n\t}\r\n\tif (typeof (resource) === 'function') {\r\n\t\tconst result = handler.trigger(resource);\r\n\t\treturn $module.setResourceBundle(result, langCode);\r\n\t} else if (utils.isPromise(resource)) {\r\n\t\treturn resource.then(function (result) {\r\n\t\t\treturn $module.setResourceBundle(result, langCode);\r\n\t\t}).catch(function (ex) {\r\n\t\t\tconst err = Error('erebus.i18n.promise_resource_error');\r\n\t\t\terr.cause = ex;\r\n\t\t\tthrow err;\r\n\t\t});\r\n\t}\r\n\tconst target = $scope.resources[langCode];\r\n\tif (!target) {\r\n\t\t$scope.resources[langCode] = resource;\r\n\t} else {\r\n\t\tObject.assign(target, resource);\r\n\t}\r\n\treturn Promise.resolve();\r\n};\r\n\r\n/**\r\n * Obtains an i18n label for the language defined in the syste,\r\n * @param {*} key Key to obtain the value for it\r\n * @param {*} defaultValue Default value in case that no language resource has been set\r\n */\r\n$module.getLabel = function(key, defaultValue) {\r\n\tconst langCode = $module.getLanguage();\r\n\tconst resources = $scope.resources[langCode];\r\n\tif (!resources || !resources[key]) {\r\n\t\treturn defaultValue ?? key;\r\n\t}\r\n\treturn resources[key];\r\n};\r\n\r\n/** Allows to get the thousands grouping separator used by the system */\r\n$module.getSystemThousandsSeparator = function () {\r\n\tif ($scope.systemThousandSymbol === null) {\r\n\t\tconst numericFormatter = new Intl.NumberFormat($module.getLanguage(), { useGrouping: true, minimumFractionDigits: 2, maximumFractionDigits: 2 });\r\n\t\tvar value = numericFormatter.format('123456.1');\r\n\t\t$scope.systemThousandSymbol = value.substring(3, 4);\r\n\t}\r\n\treturn $scope.systemThousandSymbol;\r\n};\r\n\r\n/** Allows to get the thousands grouping separator used by the application */\r\n$module.getThousandsSeparator = function () {\r\n\tif ($scope.appThousandSymbol === null) {\r\n\t\t$scope.appThousandSymbol = $module.getSystemThousandsSeparator();\r\n\t}\r\n\treturn $scope.appThousandSymbol;\r\n};\r\n\r\n/** Allows to set the thousands grouping separator used by the application */\r\n$module.setThousandsSeparator = function (value) {\r\n\t$scope.appThousandSymbol = value;\r\n};\r\n\r\n/** Allows to get the decimal symbol used by the application */\r\n$module.getSystemDecimalSymbol = function () {\r\n\tif ($scope.systemDecimalSymbol === null) {\r\n\t\tconst numericFormatter = new Intl.NumberFormat($module.getLanguage(), { useGrouping: true, minimumFractionDigits: 2, maximumFractionDigits: 2 });\r\n\t\tvar value = numericFormatter.format('1.99');\r\n\t\t$scope.systemDecimalSymbol = value.substring(1, 2);\r\n\t}\r\n\treturn $scope.systemDecimalSymbol;\r\n};\r\n\r\n/** Allows to get the decimal symbol used by the application */\r\n$module.getDecimalSymbol = function () {\r\n\tif ($scope.appDecimalSymbol === null) {\r\n\t\t$scope.appDecimalSymbol = $module.getSystemDecimalSymbol();\r\n\t}\r\n\treturn $scope.appDecimalSymbol;\r\n};\r\n\r\n/** Allows to set the decimal symbol used by the application */\r\n$module.setDecimalSymbol = function (value) {\r\n\t$scope.appDecimalSymbol = value;\r\n};\r\n\r\n/**\r\n * Allows to obtain the date format defined by the system locale configuration\r\n */\r\n$module.getSystemDateFormat = function() {\r\n\tconst dummyDate = new Date(1980, 10, 20);\r\n\tconst locale = $module.getLocale();\r\n\tvar formattedDate = dummyDate.toLocaleDateString(locale, { year: 'numeric', month: 'numeric', day: 'numeric' });\r\n\tformattedDate = formattedDate.replace('1980', 'yyyy');\r\n\tformattedDate = formattedDate.replace('11', 'mm');\r\n\treturn formattedDate.replace('20', 'dd');\r\n};\r\n\r\n/**\r\n * Allows to obtain the date format defined for the application\r\n */\r\n$module.getDateFormat = function() {\r\n\tif (!$scope.dateFormat) {\r\n\t\t$scope.dateFormat = $module.getSystemDateFormat();\r\n\t}\r\n\treturn $scope.dateFormat;\r\n};\r\n\r\n/**\r\n * Allows to define the date format for the application\r\n * @param {string} format String with the date format to define, using the following elements:\r\n * \t\t\t- yyyy: year\r\n * \t\t\t- mm: month\r\n * \t\t\t- dd: day\r\n */\r\n$module.setDateFormat = function(format) {\r\n\t$scope.dateFormat = format;\r\n};\r\n\r\n/**\r\n * Allows to obtain the date and time format defined by the system locale configuration\r\n */\r\n$module.getDateTimeFormat = function() {\r\n\tif (!$scope.dateTimeFormat) {\r\n\t\tconst dateFormat = $module.getDateFormat();\r\n\t\t$scope.dateTimeFormat = `${dateFormat} hh:MM:ss`;\r\n\t}\r\n\treturn $scope.dateTimeFormat;\r\n};\r\n\r\n/**\r\n * Allows to define the date and time format for the application\r\n * @param {string} format String with the date and time format to define, using the following elements:\r\n * \t\t\t- yyyy: year\r\n * \t\t\t- mm: month\r\n * \t\t\t- dd: day\r\n * \t\t\t- hh: Hour of the day\r\n * \t\t\t- MM: minutes\r\n * \t\t\t- ss: Seconds\r\n */\r\n$module.setDateTimeFormat = function(format) {\r\n\t$scope.dateTimeFormat = format;\r\n};\r\n\r\nexport default $module;\r\n","import i18n from './i18n.mjs';\r\n\r\nconst $scope = {};\r\n// Holds the reference to all the formatters defined by the module\r\n$scope.formatters = {};\r\n// Holds the reference to the system formatter used to handle numbers with grouping and decimals\r\n$scope.moneyFormatter = null;\r\n// Holds the reference to the system formatter used to handle numbers with decimals without grouping\r\n$scope.decimalFormatter = null;\r\n\r\n/**\r\n * Internal utility method to make sure the number is represented by a two digit value\r\n * @param {int} value Value to evaluate and add the trailing zero\r\n * @returns String with the numeric value and a zero trailing whenever it is applicable\r\n */\r\nfunction twoDigitNumber(value) {\r\n\tif (value && value < 10) {\r\n\t\treturn `0${value}`;\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Internal method to adjust a formatted string with a numeric representation to use the proper\r\n * symbols according to the application configuration\r\n * @param {string} value String with the numeric representation\r\n */\r\nfunction standardizeNumericSymbols(value) {\r\n\tif (value === null || typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\tconst systemThousands = i18n.getSystemThousandsSeparator();\r\n\tconst systemDecimal = i18n.getSystemDecimalSymbol();\r\n\tvar appThousands = i18n.getThousandsSeparator();\r\n\tconst appDecimal = i18n.getDecimalSymbol();\r\n\tif (appThousands === appDecimal) {\r\n\t\tappThousands = '';\r\n\t}\r\n\tif (systemThousands !== appThousands || systemDecimal !== appDecimal) {\r\n\t\tvalue = value.replaceAll(systemThousands, 'T');\r\n\t\tvalue = value.replaceAll(systemDecimal, 'D');\r\n\t\tvalue = value.replaceAll('T', appThousands);\r\n\t\tvalue = value.replaceAll('D', appDecimal);\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Process a string representation of a number to deformat it by removing any symbol that is not\r\n * relevant for its parsing\r\n * @param {string} value String with the numeric representation to evaluate\r\n * @returns String with the numeric representation ready to be parsed\r\n */\r\nfunction prepareNumberForParsing(value) {\r\n\tconst appThousands = i18n.getThousandsSeparator();\r\n\tconst appDecimal = i18n.getDecimalSymbol();\r\n\tif (appThousands !== appDecimal) {\r\n\t\tvalue = value.replaceAll(appThousands, '');\r\n\t\tconst systemDecimal = i18n.getSystemDecimalSymbol();\r\n\t\tvalue = value.replaceAll(appDecimal, systemDecimal);\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Internal utility method that extracts portions of a date contained in a string\r\n * @param {string} value Value with the string representation of the date\r\n * @param {string} dateFormat Format in which the date is represented\r\n * @param {string} part Part that wants to be extracted\r\n * @returns Value for the required part\r\n */\r\nfunction getDatePart(value, dateFormat, part) {\r\n\tvar startIndex = dateFormat.indexOf(part);\r\n\tvar endIndex = startIndex + part.length;\r\n\tvar partValue = value.substring(startIndex, endIndex);\r\n\treturn parseInt(partValue);\r\n}\r\n\r\n/** Class to define the methods to provide a formatting mechanism */\r\nclass Formatter {\r\n\t#name;\r\n\t#formatter;\r\n\t#deformatter;\r\n\r\n\tconstructor(name, formatter, deformatter) {\r\n\t\tthis.#name = name;\r\n\t\tthis.#formatter = formatter;\r\n\t\tthis.#deformatter = deformatter;\r\n\t}\r\n\r\n\tget name() {\r\n\t\treturn this.#name;\r\n\t}\r\n\r\n\t/**\r\n     * Method to transform a raw value into a representation to be shown in the UI\r\n     * @param {any} value Raw value that will be transformed applying the corresponding format\r\n     * @returns Formatted value\r\n     */\r\n\tformat(value) {\r\n\t\treturn this.#formatter(value);\r\n\t}\r\n\r\n\t/**\r\n     * Method to transform a formatted UI value into a raw value that can be used for operations\r\n     * @param {string} value String with the formatted value\r\n     * @returns Raw value transformed to be processed by the system\r\n     */\r\n\tdeformat(value) {\r\n\t\treturn this.#deformatter(value);\r\n\t}\r\n}\r\n\r\n// ----------------\r\n// BOOLEAN\r\n// ----------------\r\n/** Method to format a boolean value to create its UI representation */\r\nfunction booleanFormatter(value) {\r\n\tif (value === null || typeof(value) === 'undefined' || value === '') {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'boolean') {\r\n\t\treturn `ERROR_NON_BOOLEAN[${value}]`;\r\n\t}\r\n\treturn (value === true) ? 'true' : 'false';\r\n}\r\n\r\n/** Method to parse a formatted value containing a boolean representation coming from the UI */\r\nfunction booleanDeformatter(value) {\r\n\tif (typeof(value) === 'undefined' || value === null) {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\treturn value === 'true';\r\n}\r\n\r\n$scope.formatters['boolean'] = new Formatter('boolean', booleanFormatter, booleanDeformatter);\r\n\r\n// ----------------\r\n// INTEGER\r\n// ----------------\r\n/** Method to format a numeric integer value to create its UI representation */\r\nfunction integerFormatter(value) {\r\n\tif (value === null || typeof(value) === 'undefined' || value === '') {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'number') {\r\n\t\treturn `ERROR_NAN[${value}]`;\r\n\t}\r\n\treturn String(value);\r\n}\r\n\r\n/** Method to parse a formatted value containing an integer representation coming from the UI */\r\nfunction integerDeformatter(value) {\r\n\tif (typeof(value) === 'undefined' || value === null) {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\treturn parseInt(value);\r\n}\r\n\r\n$scope.formatters['integer'] = new Formatter('integer', integerFormatter, integerDeformatter);\r\n\r\n// ----------------\r\n// DECIMAL\r\n// ----------------\r\n/** Method to format a numeric decimal value to create its UI representation */\r\nfunction decimalFormatter(value) {\r\n\tif (value === null || typeof(value) === 'undefined' || value === '') {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'number') {\r\n\t\treturn `ERROR_NAN[${value}]`;\r\n\t}\r\n\tif ($scope.decimalFormatter === null) {\r\n\t\t$scope.decimalFormatter = Intl.NumberFormat(i18n.getLanguage(), { useGrouping: false, minimumFractionDigits: 2, maximumFractionDigits: 4 });\r\n\t}\r\n\tvar formatted = $scope.decimalFormatter.format(value);\r\n\tformatted = standardizeNumericSymbols(formatted);\r\n\treturn formatted;\r\n}\r\n\r\n/** Method to parse a formatted value containing a decimal representation coming from the UI */\r\nfunction decimalDeformatter(value) {\r\n\tif (typeof(value) === 'undefined' || value === null) {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\tif ($scope.decimalFormatter === null) {\r\n\t\t$scope.decimalFormatter = Intl.NumberFormat(i18n.getLanguage(), { useGrouping: false, minimumFractionDigits: 2, maximumFractionDigits: 4 });\r\n\t}\r\n\tvalue = prepareNumberForParsing(value);\r\n\treturn parseFloat(value);\r\n}\r\n\r\n$scope.formatters['decimal'] = new Formatter('decimal', decimalFormatter, decimalDeformatter);\r\n\r\n// ----------------\r\n// MONEY\r\n// ----------------\r\n/** Method to format a numeric value to create its UI representation as money */\r\nfunction moneyFormatter(value) {\r\n\tif (value === null || typeof(value) === 'undefined' || value === '') {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'number') {\r\n\t\treturn `ERROR_NAN[${value}]`;\r\n\t}\r\n\tif ($scope.moneyFormatter === null) {\r\n\t\t$scope.moneyFormatter = Intl.NumberFormat(i18n.getLanguage(), { useGrouping: true, minimumFractionDigits: 2, maximumFractionDigits: 2 });\r\n\t}\r\n\tvar formatted = $scope.moneyFormatter.format(value);\r\n\tformatted = standardizeNumericSymbols(formatted);\r\n\treturn formatted;\r\n}\r\n\r\n/** Method to parse a formatted value containing an numeric representation coming from the UI with money format */\r\nfunction moneyDeformatter(value) {\r\n\tif (typeof(value) === 'undefined' || value === null) {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\tvalue = prepareNumberForParsing(value);\r\n\treturn parseFloat(value);\r\n}\r\n\r\n$scope.formatters['money'] = new Formatter('money', moneyFormatter, moneyDeformatter);\r\n\r\n// ----------------\r\n// DATE\r\n// ----------------\r\n/** Method to format a date value to create its UI representation with date part */\r\nfunction dateFormatter(value) {\r\n\tif (value === null || typeof(value) === 'undefined') {\r\n\t\treturn null;\r\n\t}\r\n\tif (value instanceof Date) {\r\n\t\tvar dateFormat = i18n.getDateFormat();\r\n\t\tif (!dateFormat) {\r\n\t\t\treturn value.toLocaleDateString(null, { year: 'numeric', month: 'numeric', day: 'numeric' });\r\n\t\t}\r\n\t\tdateFormat = dateFormat.replace('yyyy', value.getFullYear());\r\n\t\tdateFormat = dateFormat.replace('mm', twoDigitNumber(value.getMonth() + 1));\r\n\t\tdateFormat = dateFormat.replace('dd', twoDigitNumber(value.getDate()));\r\n\t\treturn dateFormat;\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/** Method to parse a formatted value containing an date representation coming from the UI */\r\nfunction dateDeformatter(value) {\r\n\tif (typeof(value) === 'undefined' || value === null) {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\tvar dateFormat = i18n.getDateFormat();\r\n\tvar year = getDatePart(value, dateFormat, 'yyyy');\r\n\tvar month = getDatePart(value, dateFormat, 'mm');\r\n\tvar day = getDatePart(value, dateFormat, 'dd');\r\n\tconst dateValue = new Date(year, month - 1, day);\r\n\treturn dateValue;\r\n}\r\n\r\n$scope.formatters['date'] = new Formatter('date', dateFormatter, dateDeformatter);\r\n\r\n// ----------------\r\n// DATE TIME\r\n// ----------------\r\n/** Method to format a date value to create its UI representation with date and time parts */\r\nfunction dateTimeFormatter(value) {\r\n\tif (value === null || typeof(value) === 'undefined') {\r\n\t\treturn null;\r\n\t}\r\n\tif (value instanceof Date) {\r\n\t\tvar dateFormat = i18n.getDateTimeFormat();\r\n\t\tif (!dateFormat) {\r\n\t\t\treturn value.toLocaleDateString(null, { year: 'numeric', month: 'numeric', day: 'numeric' });\r\n\t\t}\r\n\t\tdateFormat = dateFormat.replace('yyyy', value.getFullYear());\r\n\t\tdateFormat = dateFormat.replace('mm', twoDigitNumber(value.getMonth() + 1));\r\n\t\tdateFormat = dateFormat.replace('dd', twoDigitNumber(value.getDate()));\r\n\t\tdateFormat = dateFormat.replace('hh', twoDigitNumber(value.getHours()));\r\n\t\tdateFormat = dateFormat.replace('MM', twoDigitNumber(value.getMinutes()));\r\n\t\tdateFormat = dateFormat.replace('ss', twoDigitNumber(value.getSeconds()));\r\n\t\treturn dateFormat;\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/** Method to parse a formatted value containing an date/time representation coming from the UI */\r\nfunction dateTimeDeformatter(value) {\r\n\tif (typeof(value) === 'undefined' || value === null) {\r\n\t\treturn null;\r\n\t} else if (typeof(value) !== 'string') {\r\n\t\treturn value;\r\n\t}\r\n\tvar dateFormat = i18n.getDateTimeFormat();\r\n\tvar year = getDatePart(value, dateFormat, 'yyyy');\r\n\tvar month = getDatePart(value, dateFormat, 'mm');\r\n\tvar day = getDatePart(value, dateFormat, 'dd');\r\n\tvar hour = getDatePart(value, dateFormat, 'hh');\r\n\tvar minute = getDatePart(value, dateFormat, 'MM');\r\n\tvar second = getDatePart(value, dateFormat, 'ss');\r\n\tconst dateValue = new Date(year, month - 1, day, hour, minute, second);\r\n\treturn dateValue;\r\n}\r\n\r\n$scope.formatters['datetime'] = new Formatter('datetime', dateTimeFormatter, dateTimeDeformatter);\r\n\r\n/**\r\n * Allows to obtain a specific formatter\r\n * @param {string} formatName String with the code of the formatter to obtain. The possible values are:\r\n * \t\t\t- integer: Formatter to create and parse representation of integer values\r\n * \t\t\t- decimal: Formatter to create and parse representation of decimal values\r\n * \t\t\t- money: Formatter to create and parse representation of numeric values adding grouping and two decimals\r\n * \t\t\t- date: Formatter to create and parse representation of date values\r\n * \t\t\t- datetime: Formatter to create and parse representation of date and time values\r\n * @returns\r\n */\r\nconst $module = function(formatName) {\r\n\tif (!formatName) {\r\n\t\treturn null;\r\n\t}\r\n\tif (!$scope.formatters[formatName]) {\r\n\t\tconsole.warn(`erebus.formats.unknown_formatter[${formatName}]`);\r\n\t\treturn null;\r\n\t}\r\n\treturn $scope.formatters[formatName];\r\n};\r\n\r\nexport default $module;\r\n","/** Internal method to clear and stardardize a path */\r\nfunction clearPath(path) {\r\n\tif (path && typeof (path) === 'string') {\r\n\t\tif (path.startsWith('#')) {\r\n\t\t\tpath = path.substring(1);\r\n\t\t}\r\n\t\tif (path.startsWith('/')) {\r\n\t\t\tpath = path.substring(1);\r\n\t\t}\r\n\t}\r\n\treturn path;\r\n}\r\n\r\n/**\r\n * Compares a path against the routing path of a router\r\n * @param {string} routingPath Path of the router\r\n * @param {string} targetPath Path to compare\r\n * @returns Boolean value to determine if the route is equivalent to the path\r\n */\r\nfunction compareStringPaths(routingPath, targetPath) {\r\n\tif (routingPath === '*' || routingPath === targetPath) {\r\n\t\treturn true;\r\n\t}\r\n\tconst routingParts = routingPath.split('/');\r\n\tconst targetParts = targetPath.split('/');\r\n\tfor (var idx = 0; idx < routingParts.length; idx++) {\r\n\t\t// ignore the parameter parts in the routing\r\n\t\tif (routingParts[idx].startsWith(':')) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (routingParts[idx] !== '*' && routingParts[idx] !== targetParts[idx]) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Uses the pattern defined by a routing path to extract the parameters from it\r\n * @param {string} routingPath String with the routing path\r\n * @param {string} targetPath String with the path to extract the parameters from it\r\n */\r\nfunction extractPathParameters(routingPath, targetPath) {\r\n\tconst parameters = {};\r\n\tconst routingParts = routingPath.split('/');\r\n\tconst targetParts = targetPath.split('/');\r\n\tfor (var idx = 0; idx < routingParts.length; idx++) {\r\n\t\tif (!routingParts[idx].startsWith(':')) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tconst paramName = routingParts[idx].substring(1);\r\n\t\tparameters[paramName] = targetParts[idx];\r\n\t}\r\n\treturn parameters;\r\n}\r\n\r\n/** Object to represent a single route */\r\nclass Route {\r\n\t/** Path served by this route */\r\n\t#path;\r\n\t/** Handler used to serve the route represented by this instance */\r\n\t#handler;\r\n\r\n\t/**\r\n\t * Creates a new route to serve a specific path\r\n\t * @param {string} path String with the path to serve\r\n\t * @param {function} handler Function to be invoked when this route is served\r\n\t */\r\n\tconstructor(path, handler) {\r\n\t\tthis.#path = clearPath(path);\r\n\t\tthis.#handler = handler;\r\n\t}\r\n\r\n\t/**\r\n\t * Determines if the current route instance can match a specific path\r\n\t * @param {string} path Path to evaluate\r\n\t */\r\n\tmatch(path) {\r\n\t\tpath = clearPath(path);\r\n\t\tif (typeof (this.#path) === 'string') {\r\n\t\t\treturn compareStringPaths(this.#path, path);\r\n\t\t} else if (this.#path instanceof RegExp) {\r\n\t\t\treturn this.#path.test(path);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/** Handles a request using this route instance */\r\n\thandle(path) {\r\n\t\tif (!this.#handler) {\r\n\t\t\treturn Promise.reject(new Error(`erebus.route.no_handler[${path}]`));\r\n\t\t}\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tpath = clearPath(path);\r\n\t\t\ttry {\r\n\t\t\t\tvar parameters = extractPathParameters(this.#path, path);\r\n\t\t\t\tvar result = this.#handler(parameters);\r\n\t\t\t\tif (result instanceof Promise) {\r\n\t\t\t\t\tresult.then(resolve).catch(reject);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t}\r\n\t\t\t} catch (ex) {\r\n\t\t\t\tconsole.error('erebus.route.handler_error', ex);\r\n\t\t\t\treject(ex);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Internal method with the logic to identify the matching router from a list of possible routes\r\n * @param {array} routeList List containing the routes instances to evaluate\r\n * @param {string} path Path to match\r\n * @returns The matching route or null if no matching route is found\r\n */\r\nfunction getMatchingRouter(routeList, path) {\r\n\tfor (var rdx = 0; rdx < routeList.length; rdx++) {\r\n\t\tlet route = routeList[rdx];\r\n\t\tif (route.match(path)) {\r\n\t\t\treturn route;\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n}\r\n\r\nclass RouterEngine {\r\n\t/** Hold the list of routes registered */\r\n\t#routes = [];\r\n\t/** Flag to determine if the routing engine has been started */\r\n\t#started = false;\r\n\t/** Reference to the default router registered */\r\n\t#defaultRouter;\r\n\t/** Reference to the error handler */\r\n\t#onError;\r\n\r\n\t/**\r\n\t * Register a router to handle a specific path\r\n\t * @param {string} path Path to handle\r\n\t * @param {function} handler Handler to be triggered when the path is matched\r\n\t * @returns Instance of the routing engine\r\n\t */\r\n\tregister(path, handler) {\r\n\t\tif (!handler || typeof(handler) !== 'function') {\r\n\t\t\tthrow new Error(`erebus.router.invalid_handler[${path}]`);\r\n\t\t}\r\n\t\tthis.#routes.push(new Route(path, handler));\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Serves a specific path\r\n\t * @param {string} path Path to serve\r\n\t * @returns Promise to be fullfilled (or rejected) after the route is served\r\n\t */\r\n\tserve(path) {\r\n\t\tif (typeof (path) === 'undefined') {\r\n\t\t\tpath = null;\r\n\t\t}\r\n\t\tpath = clearPath(path);\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tvar effectiveRoute = getMatchingRouter(this.#routes, path);\r\n\t\t\tif (!effectiveRoute) {\r\n\t\t\t\teffectiveRoute = this.#defaultRouter;\r\n\t\t\t}\r\n\t\t\tif (!effectiveRoute) {\r\n\t\t\t\treject('erebus.route.no_matching_route_or_default');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\teffectiveRoute.handle(path).then(function () {\r\n\t\t\t\tresolve(true);\r\n\t\t\t}).catch(reject);\r\n\t\t});\r\n\t}\r\n\r\n\t/** Internal method to trigger the routing process based on the current path */\r\n\t#triggerRouting() {\r\n\t\t// TODO: add beforeRoute event\r\n\t\tthis.serve(window.location.hash).then(() => {\r\n\t\t\t// TODO: add afterRoute event\r\n\t\t}).catch((err) => {\r\n\t\t\tconsole.error('erebus.router.error', err);\r\n\t\t\tif (this.#onError) {\r\n\t\t\t\tthis.#onError(err);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/** Initialize the route engine to start serving requests */\r\n\tstart() {\r\n\t\tif (this.#started) {\r\n\t\t\tconsole.warn('erebus.router.already_started');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.#started = true;\r\n\t\twindow.addEventListener('popstate', () => {\r\n\t\t\tthis.#triggerRouting();\r\n\t\t});\r\n\t\tthis.#triggerRouting();\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the behavior for the default route (when no other route matches the path)\r\n\t * @param {function} handler Funtion to be invoked when no other route matches the requested path or null to remove the default handler\r\n\t * @returns Instance of the routing engine\r\n\t */\r\n\tdefault(handler) {\r\n\t\tif (!handler) {\r\n\t\t\tthis.#defaultRouter = null;\r\n\t\t\treturn this;\r\n\t\t} else if (typeof(handler) != 'function') {\r\n\t\t\tconsole.error('Unable to register a non-function as a default handler for Erebus router');\r\n\t\t\tthrow new Error('erebus.router.invalid_default_handler');\r\n\t\t}\r\n\t\tthis.#defaultRouter = new Route('*', handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the behavior when a route fails\r\n\t * @param {function} handler Funtion to be invoked when the routing causes an error\r\n\t * @returns Instance of the routing engine\r\n\t */\r\n\terror(handler) {\r\n\t\tif (!handler) {\r\n\t\t\tthis.#onError = null;\r\n\t\t\treturn this;\r\n\t\t} else if (typeof (handler) !== 'function') {\r\n\t\t\tconsole.error('Unable to register a non-function as an error handler for Erebus router');\r\n\t\t\tthrow new Error('erebus.router.invalid_error_handler');\r\n\t\t}\r\n\t\tthis.#onError = handler;\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nconst router = new RouterEngine();\r\nexport default router;","/* eslint-disable no-useless-escape */\r\nimport utils from './utils.mjs';\r\n\r\nconst $scope = {};\r\n\r\n// Holds the reference to all the validators defined by the module\r\n$scope.validators = {};\r\n\r\n/** Validator to make sure a non-empty/non-null value was provided */\r\n$scope.validators['required'] = function(value) {\r\n\treturn (value !== null && value !== '' && typeof(value) !== 'undefined');\r\n};\r\n\r\n/** Validator to make sure a valid email address was provided */\r\n$scope.validators['email'] = function(value) {\r\n\t// Since this validation is not implicetely requiring a value, then any empty value is considered valid\r\n\tif (value === null || value === undefined || (typeof(value) === 'string' && value.length === 0)) {\r\n\t\treturn true;\r\n\t}\r\n\tvar regex = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g;\r\n\treturn typeof(value) === 'string' && regex.test(value);\r\n};\r\n\r\n/** Validator to make sure a valid URL was provided */\r\n$scope.validators['url'] = function(value) {\r\n\t// Since this validation is not implicetely requiring a value, then any empty value is considered valid\r\n\tif (utils.isNonValue(value)) {\r\n\t\treturn true;\r\n\t}\r\n\tvar regex = /((http(s)?):\\/\\/){1}(www|\\w{2,256})(\\.{1}\\w{2,256})+(\\/{1}\\w{2,256})*(\\??\\w{1,255}={1}\\w{1,255}(&{1}\\w{1,255}=\\w{1,255})*)?/g;\r\n\treturn typeof(value) === 'string' && regex.test(value);\r\n};\r\n\r\n/**\r\n * Internal utility method to execute a validation logic that is based on a single value parameter\r\n * @param {*} value Value to evaluate\r\n * @param {string} params String with a the single value parameter used as a reference for the validator\r\n * @param {string} valueType String with the type of the expected data type.  It is used to transform the parameter\r\n * @param {Function} evaluator Function with the validation logic\r\n * @returns Boolean value with the validation result\r\n */\r\nfunction processParametrizedValidator(value, params, evaluator) {\r\n\tif (params === null || params === undefined) {\r\n\t\tthrow new Error('erebus.validator.range.no_threshold');\r\n\t}\r\n\tvar effectiveParam = params;\r\n\tif (typeof(params) === 'string') {\r\n\t\tif (params.indexOf('.') > 0) {\r\n\t\t\teffectiveParam = parseFloat(params);\r\n\t\t} else {\r\n\t\t\teffectiveParam = parseInt(params);\r\n\t\t}\r\n\t\tif (isNaN(effectiveParam)) {\r\n\t\t\tconst errorCode = 'erebus.validator.range.unparseable';\r\n\t\t\tconsole.error(`${errorCode}[${typeof(params)}|${params}]`);\r\n\t\t\tthrow new Error(errorCode);\r\n\t\t}\r\n\t}\r\n\treturn evaluator(value, effectiveParam);\r\n}\r\n\r\n/** Validator to make sure an integer value is not less than the provided value */\r\n$scope.validators['min'] = function(value, params) {\r\n\t// A null, an undefined value or an empty string cannot be evaluated against the threshold\r\n\tif (utils.isNonValue(value)) {\r\n\t\treturn true;\r\n\t}\r\n\tif (params === '@now') {\r\n\t\tparams = new Date();\r\n\t} else if (params === '@today') {\r\n\t\tparams = new Date();\r\n\t\tparams.setHours(0);\r\n\t\tparams.setMinutes(0);\r\n\t\tparams.setSeconds(0);\r\n\t\tparams.setMilliseconds(0);\r\n\t}\r\n\treturn processParametrizedValidator(value, params, function(value, range) {\r\n\t\tif (typeof(value) === 'string') {\r\n\t\t\treturn value.length >= range;\r\n\t\t}\r\n\t\treturn value >= range;\r\n\t});\r\n};\r\n\r\n/** Validator to make sure an integer value is not greater than the provided value */\r\n$scope.validators['max'] = function(value, params) {\r\n\t// A null, an undefined value or an empty string cannot be evaluated against the threshold\r\n\tif (utils.isNonValue(value)) {\r\n\t\treturn true;\r\n\t}\r\n\tif (params === '@now') {\r\n\t\tparams = new Date();\r\n\t} else if (params === '@today') {\r\n\t\tparams = new Date();\r\n\t\tparams.setHours(23);\r\n\t\tparams.setMinutes(59);\r\n\t\tparams.setSeconds(59);\r\n\t\tparams.setMilliseconds(999);\r\n\t}\r\n\treturn processParametrizedValidator(value, params, function(value, range) {\r\n\t\tif (typeof(value) === 'string') {\r\n\t\t\treturn value.length <= range;\r\n\t\t}\r\n\t\treturn value <= range;\r\n\t});\r\n};\r\n\r\nconst $module = {};\r\n\r\n/**\r\n * Parses a validation specification and extract the tag, the parameters and the validator for it\r\n * @param {*} validator String with the validator specification\r\n * @returns Object containing the tag, the parameters and the validator reference or null if there is no validator defined for the tag\r\n */\r\nfunction parseValidator(validation) {\r\n\tif (!validation || typeof(validation) !== 'string') {\r\n\t\treturn null;\r\n\t}\r\n\tvar result = null;\r\n\tconst paramIndex = validation.indexOf('=');\r\n\tif (paramIndex < 0) {\r\n\t\tresult = { tag: { name: utils.trim(validation) } };\r\n\t} else {\r\n\t\tresult = { tag: { name: utils.trim(validation.substring(0, paramIndex)) } };\r\n\t\tresult.tag.params = utils.trim(validation.substring(paramIndex + 1));\r\n\t}\r\n\tresult.validator = $scope.validators[result.tag.name];\r\n\tif (!result.validator) {\r\n\t\treturn null;\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Executes a specific validation\r\n * @param {string} validation String containing the validation specification.  The specification is composed by a tag\r\n * \t\tthat identifies the validation to execute and optional parameters to provide context to the validation instruction.\r\n * \t\tThe parameters are applicable depending on the needs of the validation.  The tag and the parameters are separated\r\n * \t\tby an equals symbol (=).\r\n * @param {*} value Value to validate using the validation specification. It should be provided using the valid type to\r\n * \t\texecute the validation.\r\n * @param {*} failCollector Array to collect the details about the possible validation failures or null if there is no\r\n * \t\tneed to collect the failures.\r\n * @returns Boolean value with the result of the validation\r\n */\r\n$module.validate = function(validation, value, failCollector) {\r\n\tif (!validation) {\r\n\t\treturn true;\r\n\t}\r\n\tconst parsed = parseValidator(validation);\r\n\tif (!parsed) {\r\n\t\tconsole.warn(`erebus.validator.invalid_validation[${validation}]`);\r\n\t\treturn true;\r\n\t}\r\n\tif (!parsed.validator(value, parsed.tag.params)) {\r\n\t\tif (failCollector && Array.isArray(failCollector)) {\r\n\t\t\tfailCollector.push(parsed.tag);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nexport default $module;\r\n","import formats from './formats.mjs';\r\nimport validator from './validator.mjs';\r\nimport utils from './utils.mjs';\r\nimport handler from './handler.mjs';\r\n\r\n/**\r\n * Extracts all the reference to the applicable fields that contains a model attribute\r\n * @param {string} containerId Identifier of the top DOM element from where all the model fields will be extracted\r\n */\r\nfunction getModelFields(containerId) {\r\n\tconst formElement = document.getElementById(containerId);\r\n\tif (!formElement) {\r\n\t\tconsole.warn(`erebus.form.container_not_found[${containerId}]`);\r\n\t\treturn [];\r\n\t}\r\n\treturn formElement.querySelectorAll('[model]');\r\n}\r\n\r\n/**\r\n * Extracts all the reference to the fields that contains a validation attribute\r\n * @param {string} containerId Identifier of the top DOM element from where all the applicable fields will be extracted\r\n */\r\nfunction getValidationFields(containerId) {\r\n\tconst formElement = document.getElementById(containerId);\r\n\tif (!formElement) {\r\n\t\tconsole.warn(`erebus.form.container_not_found[${containerId}]`);\r\n\t\treturn [];\r\n\t}\r\n\treturn formElement.querySelectorAll('[validation]');\r\n}\r\n\r\n/**\r\n * Extracts the applicable formatter according to the field specification\r\n * @param {object} fieldInstance Reference to the field instance to extract the formatter for it\r\n * @returns Formatter instance or null if the field does not have any formatter\r\n */\r\nfunction getFieldFormatter(fieldInstance) {\r\n\tconst formatCode = fieldInstance.getAttribute('format');\r\n\treturn formats(formatCode);\r\n}\r\n\r\n/**\r\n * Gets the value from a specific field\r\n * @param {HTMLElement} fieldInstance Reference to the HTMLElement DOM field instance to extract the value from it\r\n * @returns Field value\r\n */\r\nfunction getFieldValue(fieldInstance) {\r\n\tconst tagName = fieldInstance.tagName;\r\n\tif (tagName === 'INPUT') {\r\n\t\tconst inputType = fieldInstance.getAttribute('type');\r\n\t\tif (inputType === 'checkbox' && fieldInstance.value === '@') {\r\n\t\t\t// NOTE: boolean value is not formatted, so it should not pass thru the formatter logic\r\n\t\t\treturn fieldInstance.checked;\r\n\t\t}\r\n\t}\r\n\tconst formatter = getFieldFormatter(fieldInstance);\r\n\tif (formatter) {\r\n\t\treturn formatter.deformat(fieldInstance.value);\r\n\t}\r\n\treturn fieldInstance.value;\r\n}\r\n\r\n/**\r\n * Sets the value on a specific field\r\n * @param {HTMLElement} fieldInstance Reference to the HTMLElement DOM field instance to set the value on it\r\n * @param {any} value Value to be set\r\n */\r\nfunction setFieldValue(fieldInstance, value) {\r\n\tif (typeof (value) === 'undefined' || value === null) {\r\n\t\tvalue = '';\r\n\t}\r\n\tconst tagName = fieldInstance.tagName;\r\n\tif (tagName === 'INPUT') {\r\n\t\tconst inputType = fieldInstance.getAttribute('type');\r\n\t\tif (inputType === 'checkbox') {\r\n\t\t\tif (fieldInstance.value === '@') {\r\n\t\t\t\tfieldInstance.checked = value;\r\n\t\t\t} else {\r\n\t\t\t\tfieldInstance.checked = (fieldInstance.value === value);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t} else if (inputType === 'radio') {\r\n\t\t\tfieldInstance.checked = (fieldInstance.value === value);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tconst formatter = getFieldFormatter(fieldInstance);\r\n\tif (formatter) {\r\n\t\tvalue = formatter.format(value);\r\n\t}\r\n\tfieldInstance.value = value;\r\n}\r\n\r\n/**\r\n * Determines if a specific model field can be considered to collect its value or not\r\n * @param {HTMLElement} fieldInstance Reference to the HTMLElement DOM field instance to evaluate\r\n */\r\nfunction canCollectField(fieldInstance) {\r\n\tconst tagName = fieldInstance.tagName;\r\n\tif (tagName === 'INPUT') {\r\n\t\tconst inputType = fieldInstance.getAttribute('type');\r\n\t\tif (inputType === 'checkbox') {\r\n\t\t\tif (fieldInstance.value === '@') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn fieldInstance.checked;\r\n\t\t} else if (inputType === 'radio' && !fieldInstance.checked) {\r\n\t\t\treturn false;\r\n\t\t} else if (inputType === 'button') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Collects the value of a specific field and fills the corresponding model into a collector instance\r\n * @param {HTMLElement} fieldInstance Reference to the HTMLElement DOM field instance to collect its value\r\n * @param {object} collector Object in which the model properties and values are being collected into\r\n */\r\nfunction collectField(fieldInstance, collector) {\r\n\tif (!canCollectField(fieldInstance)) {\r\n\t\treturn;\r\n\t}\r\n\tvar model = fieldInstance.getAttribute('model');\r\n\tif (!model) {\r\n\t\treturn;\r\n\t}\r\n\tconst value = getFieldValue(fieldInstance);\r\n\tif (typeof (value) === 'undefined' || value === null || value === '') {\r\n\t\treturn;\r\n\t}\r\n\tmodel = model.split('.');\r\n\tfor (var mdx = 0; mdx < model.length; mdx++) {\r\n\t\tvar modelAttribute = model[mdx];\r\n\t\tif (mdx == model.length - 1) {\r\n\t\t\tcollector[modelAttribute] = value;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!collector[modelAttribute]) {\r\n\t\t\tcollector[modelAttribute] = {};\r\n\t\t}\r\n\t\tcollector = collector[modelAttribute];\r\n\t}\r\n}\r\n\r\n/**\r\n * Allows to determine if a specific field instance is available to be validated\r\n * @param {HTMLElement} fieldInstance Reference to the field to evaluate\r\n * @returns Boolean value to determine if can be validated or not\r\n */\r\nfunction canValidateField(fieldInstance) {\r\n\tconst tagName = fieldInstance.tagName;\r\n\treturn tagName === 'INPUT' || tagName === 'SELECT';\r\n}\r\n\r\n/**\r\n * Extracts an array with the validations or null if the field does not have applicable validations\r\n * @param {HTMLElement} fieldInstance Reference to the field to extract the validations from it\r\n * @returns Array with the validations or null if there are not applicable validations\r\n */\r\nfunction getEffectiveFieldValidations(fieldInstance) {\r\n\tif (!canValidateField(fieldInstance)) {\r\n\t\treturn null;\r\n\t}\r\n\tvar fieldValidations = fieldInstance.getAttribute('validation');\r\n\tif (fieldValidations === '') {\r\n\t\treturn null;\r\n\t}\r\n\treturn fieldValidations.split(';');\r\n}\r\n\r\n/**\r\n * Implements the validation of a specific form field\r\n * @param {HTMLElement} fieldInstance Reference to the field to be validated\r\n * @param {*} collector Optional array to collect the details of the validation failures, or function to be invoked with the result of each validation\r\n * @returns Boolean value to determine if the field passed the validations (true) or not (false)\r\n */\r\nfunction validateField(fieldInstance, collector) {\r\n\tconst fieldValidations = getEffectiveFieldValidations(fieldInstance);\r\n\tif (!fieldValidations) {\r\n\t\treturn true;\r\n\t}\r\n\tvar result = true;\r\n\tconst fieldValue = getFieldValue(fieldInstance);\r\n\tconst fieldFailCollector = [];\r\n\tfor (var vdx=0; vdx < fieldValidations.length; vdx++) {\r\n\t\tconst validation = utils.trim(fieldValidations[vdx]);\r\n\t\tif (validation === '') {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tresult = validator.validate(validation, fieldValue, fieldFailCollector) && result;\r\n\t}\r\n\tif (collector) {\r\n\t\tif (typeof(collector) === 'function') {\r\n\t\t\thandler.trigger(collector, fieldInstance, result, fieldFailCollector);\r\n\t\t} else if (fieldFailCollector.length > 0 && Array.isArray(collector)) {\r\n\t\t\tcollector.push({ field: fieldInstance, failures: fieldFailCollector });\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n/** Object wrapping the logic to interact with a conceptual form and its fields */\r\nclass FormWrapper {\r\n\t/** String with the identifier of the top HTMLElement containing the form fields */\r\n\t#containerId;\r\n\r\n\t/**\r\n     * Creates the representation of a wrapping object using an identifier to contextualize the field extraction\r\n     * @param {*} containerId String with the identifier of the top HTMLElement containing the form fields\r\n     */\r\n\tconstructor(containerId) {\r\n\t\tthis.#containerId = containerId;\r\n\t}\r\n\r\n\t/** Cleans all the model fields inside the HTMLElement container */\r\n\tclean() {\r\n\t\tconst modelFields = getModelFields(this.#containerId);\r\n\t\tfor (var fdx = 0; fdx < modelFields.length; fdx++) {\r\n\t\t\tsetFieldValue(modelFields[fdx]);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n     * Extracts all fields inside the HTMLElement container and collects its values into an object.\r\n     * Each field to be collected should contain a model attribute with the name of the property that will hold the field value.\r\n     * @returns Object containing the field values\r\n     */\r\n\tcollect() {\r\n\t\tconst output = {};\r\n\t\tconst modelFields = getModelFields(this.#containerId);\r\n\t\tfor (var fdx = 0; fdx < modelFields.length; fdx++) {\r\n\t\t\tcollectField(modelFields[fdx], output);\r\n\t\t}\r\n\t\treturn output;\r\n\t}\r\n\r\n\t/**\r\n\t * Populates the fields inside the HTMLElement defined as the form container and set its values according to\r\n\t * the corresponding attribute values from the model defined for each field\r\n\t * @param {*} values Object containing the source to consume the model values to set on each field\r\n\t */\r\n\tfill(values) {\r\n\t\tif (!values) {\r\n\t\t\tthis.clean();\r\n\t\t}\r\n\t\tconst modelFields = getModelFields(this.#containerId);\r\n\t\tfor (var fdx = 0; fdx < modelFields.length; fdx++) {\r\n\t\t\tconst fieldInstance = modelFields[fdx];\r\n\t\t\tvar model = fieldInstance.getAttribute('model');\r\n\t\t\tif (!model) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tvar fieldValue = values;\r\n\t\t\tmodel = model.split('.');\r\n\t\t\tfor (var mdx = 0; mdx < model.length; mdx++) {\r\n\t\t\t\tvar modelAttribute = model[mdx];\r\n\t\t\t\tif (fieldValue) {\r\n\t\t\t\t\tfieldValue = fieldValue[modelAttribute];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsetFieldValue(fieldInstance, fieldValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the fields in the form container with applicable validations\r\n\t * @param {*} collector Optional array to collect the details of the validation failures, or function to be invoked with the result of each validation\r\n\t * @returns Boolean value with the validation result\r\n\t */\r\n\tvalidate(collector) {\r\n\t\tvar result = true;\r\n\t\tconst fieldList = getValidationFields(this.#containerId);\r\n\t\tfor (var fdx = 0; fdx < fieldList.length; fdx++) {\r\n\t\t\tresult = validateField(fieldList[fdx], collector) && result;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}\r\n\r\nconst $module = function (formId) {\r\n\treturn new FormWrapper(formId);\r\n};\r\n\r\nexport default $module;\r\n","import $ from './element.mjs';\r\nimport handler from './handler.mjs';\r\nimport utils from './utils.mjs';\r\n\r\nconst $scope = {};\r\n// Contains the default target area to load the content.  It can be a string with the selector for the DOM element\r\n// or a reference to an HTMLElement.  If it is null then the body will be used as the target area. The method setDefaultTarget\r\n// is used to define this value\r\n$scope.defaultTarget = null;\r\n\r\n/**\r\n * Function that allows to define a handler to configure a routing specification that\r\n * loads content from a HTML fragment and executes a JavaScript action after the content\r\n * has been loaded.\r\n * @param {*} specs Object with the specifications to create the routing controller. It is composed by\r\n *          the following attributes:\r\n *          - fragment: String with the URL of the fragment to load, function returning the URL of the fragment to load\r\n * \t\t\t\tor promise with the content to load.  This parameter is mandatory.\r\n *          - target: String with the selector of the DOM element that will receive the content or reference to its HTMLElement.\r\n *              If it not provided, then the default target area will be used.  If no default target area is defined, then the\r\n *              document body will be used.  The function setDefaultTarget can be used to define the default target.\r\n *          - handler: Function to be invoked after the fragment has been loaded and the DOM has been updated with the content\r\n * @returns Function that can be used to configure a route\r\n */\r\nconst $module = function(specs) {\r\n\tvar effectiveTarget = specs.target;\r\n\tif (!effectiveTarget) {\r\n\t\teffectiveTarget = $scope.defaultTarget;\r\n\t}\r\n\tif (!effectiveTarget) {\r\n\t\teffectiveTarget = document.body;\r\n\t}\r\n\tif (!specs) {\r\n\t\treturn function() {\r\n\t\t\t$(effectiveTarget).content('<div class=\"erb-badge erb-error\">erebus.controller.error.no_specs</div>');\r\n\t\t};\r\n\t} else if (!specs.fragment) {\r\n\t\treturn function() {\r\n\t\t\t$(effectiveTarget).content('<div class=\"erb-badge erb-error\">erebus.controller.error.no_fragment</div>');\r\n\t\t};\r\n\t}\r\n\treturn async function(params) {\r\n\t\tvar effectiveFragment = specs.fragment;\r\n\t\tif (typeof(effectiveFragment) === 'function') {\r\n\t\t\teffectiveFragment = handler.trigger(effectiveFragment, params);\r\n\t\t}\r\n\t\tif (utils.isPromise(effectiveFragment)) {\r\n\t\t\tconst content = await effectiveFragment;\r\n\t\t\t$(effectiveTarget).content(content);\r\n\t\t} else if (typeof(effectiveFragment) === 'string') {\r\n\t\t\tawait $(effectiveTarget).load(effectiveFragment);\r\n\t\t} else {\r\n\t\t\t$(effectiveTarget).content('<div class=\"erb-badge erb-error\">erebus.controller.invalid_fragment</div>');\r\n\t\t}\r\n\t\tif (typeof(specs.handler) === 'function') {\r\n\t\t\ttry {\r\n\t\t\t\tspecs.handler(params);\r\n\t\t\t} catch (ex) {\r\n\t\t\t\tconst errorCode = 'erebus.controller.handler_error';\r\n\t\t\t\tconsole.error(errorCode, ex);\r\n\t\t\t\tthrow new Error(errorCode);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n};\r\n\r\n/**\r\n * Defines the default target area to be used by the controllers\r\n * @param {*} target String with the ID of the DOM element that will receive the content or a reference to an HTMLElement\r\n */\r\n$module.setTarget = function(target) {\r\n\t$scope.defaultTarget = target;\r\n};\r\n\r\nexport default $module;","'use strict';\r\nconsole.log('Erebus Core v0.1.4');\r\n\r\nimport utils from './utils.mjs';\r\nimport cookies from './cookies.mjs';\r\nimport random from './random.mjs';\r\nimport events from './events.mjs';\r\nimport handler from './handler.mjs';\r\nimport $ from './element.mjs';\r\nimport http from './http.mjs';\r\nimport i18n from './i18n.mjs';\r\nimport formats from './formats.mjs';\r\nimport router from './router.mjs';\r\nimport form from './form.mjs';\r\nimport controller from './controller.mjs';\r\n\r\nexport default { utils, cookies, random, events, handler, $, http, i18n, formats, router, controller, form };\r\n"],"names":["$module","value","Promise","_typeof","then","replace","trim","length","tinyId","Math","random","toString","substring","$module$8","set","name","timespan","Error","expireDate","Date","setTime","getTime","cookie","utils","toGMTString","document","get","cookiestring","RegExp","exec","decodeURIComponent","shortId","guid","$module$7","readyState","resolve","addEventListener","attachEvent","console","error","reject","target","animationClass","capture","once","className","classList","add","addClass","fnc","_len","arguments","params","Array","_key","call","apply","concat","ex","_len2","_key2","$scope","executeRequest","method","url","options","request","window","XMLHttpRequest","ActiveXObject","createXmlHttp","onreadystatechange","status","err","code","response","responseText","headers","rawHeaders","getAllResponseHeaders","split","idx","parts","headerName","toLowerCase","headerValue","getResponseHeaders","parser","contentType","startsWith","parsers","getResponseParser","interceptor","result","undefined","open","async","setRequestHeader","setRequestHeaders","data","send","$scope$5","JSON","parse","cause","post","put","$module$5","loadScript","element","createElement","src","type","onerror","onload","head","appendChild","xmlToHtml","xmlElement","htmlElement","tagName","ndx","attributes","xmlAttribute","setAttribute","childNodes","childXml","nodeType","childHtml","warn","childText","createTextNode","textContent","parseHTML","content","domParser","DOMParser","holder","innerHTML","_toConsumableArray","results","parseFromString","push","createErrorContent","errorCode","errorInstance","errorId","errorElement","createErebusElement","source","ErebusElement","body","HTMLElement","nativeSource","endsWith","getElementById","querySelector","_wrappedElement","WeakMap","_hidden","_classCallCheck","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","this","_load","_createClass","key","_classPrivateFieldGet","firstChild","removeChild","removeAllChild","clear","innerScripts","querySelectorAll","scriptObj","parentNode","newScript","setParentNode","parent","parsedContent","eventName","listener","handler","computedDisplay","getComputedStyle","getPropertyValue","originalDisplay","style","display","sourceElement","clonedElement","cloneNode","removeAttribute","cloneHTMLElement","classes","cdx","test","remove","regex","_asyncToGenerator","_regeneratorRuntime","mark","_callee","errorBlock","wrap","_context","prev","next","http","sent","t0","stop","_x","$module$4","getLocale","navigator","language","browserLanguage","getSystemLanguage","substr","setLanguage","getLanguage","setResourceBundle","resource","langCode","trigger","isPromise","resources","Object","assign","getLabel","defaultValue","getSystemThousandsSeparator","systemThousandSymbol","Intl","NumberFormat","useGrouping","minimumFractionDigits","maximumFractionDigits","format","getThousandsSeparator","appThousandSymbol","setThousandsSeparator","getSystemDecimalSymbol","systemDecimalSymbol","getDecimalSymbol","appDecimalSymbol","setDecimalSymbol","getSystemDateFormat","dummyDate","locale","formattedDate","toLocaleDateString","year","month","day","getDateFormat","dateFormat","setDateFormat","getDateTimeFormat","dateTimeFormat","setDateTimeFormat","twoDigitNumber","standardizeNumericSymbols","systemThousands","i18n","systemDecimal","appThousands","appDecimal","replaceAll","prepareNumberForParsing","getDatePart","part","startIndex","indexOf","endIndex","partValue","parseInt","formatters","moneyFormatter","decimalFormatter","_name","_formatter","_deformatter","Formatter","formatter","deformatter","String","formatted","parseFloat","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","hour","minute","second","formatName","clearPath","path","_path","_handler","Route","routingPath","targetPath","routingParts","targetParts","compareStringPaths","_this","parameters","extractPathParameters","_routes","_started","_defaultRouter","_onError","_triggerRouting","WeakSet","_triggerRouting2","_this4","serve","location","hash","router","RouterEngine","_this2","effectiveRoute","routeList","rdx","route","match","getMatchingRouter","handle","_this3","_classPrivateMethodGet","processParametrizedValidator","evaluator","effectiveParam","isNaN","validators","$scope$1","isNonValue","setHours","setMinutes","setSeconds","setMilliseconds","range","getModelFields","containerId","formElement","getFieldFormatter","fieldInstance","formatCode","getAttribute","formats","getFieldValue","checked","deformat","setFieldValue","inputType","collectField","collector","canCollectField","model","mdx","modelAttribute","validateField","fieldValidations","canValidateField","getEffectiveFieldValidations","fieldValue","fieldFailCollector","vdx","validation","validator","validate","isArray","field","failures","$module$2","failCollector","parsed","paramIndex","tag","parseValidator","_containerId","FormWrapper","modelFields","fdx","output","values","clean","fieldList","specs","effectiveTarget","defaultTarget","fragment","_ref","effectiveFragment","$","load","setTarget","log","cookies","events","controller","form","formId"],"mappings":"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"}